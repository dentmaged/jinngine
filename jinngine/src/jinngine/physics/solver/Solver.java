package jinngine.physics.solver;
import java.util.*;
import jinngine.physics.*;

/**
 * Solver for a non-linear complimentarity problem (NCP).<p>
 *   
 * The contact force problem generated by Jinngine is ultimately a non-linear complementarity problem. In 
 * fact, when disregarding the coupling between friction forces and normal forces, the problem becomes a
 * mixed linear complementarity problem, or MLCP for short. The MLCP is on the form 
 * <p>
 * Given the matrix <b>A</b>, the vector b, and the solution limit vectors l and u,
 * Find x, such that
 * <p>
 *  w = <b>A</b> x + b 
 * <p>
 *  where
 * <p>
 *   if x_i=l_i  then  w_i<=0 <br>
 *   if x_i in (l_i,u_i) then w_i = 0 <br>
 *   if x_i=u_i then w_i>=0 <p>
 *  
 *  <b>A</b> is the matrix <b>J M^(-1) J^T</b> and b is the vector of desired change in velocities. 
 *  
 * <p>
 * This problem class can model normal contact forces and various joint types. The 
 * reason why this becomes a NCP when contact friction is introduced, is that
 * we allow u and l to depend on the magnitude of some x_i vales, namely the x_i's that
 * represent normal contact forces, so <p>
 * 
 * l_i = -|mu * x_j|  and  u_i = |mu*x_j| <p>
 * 
 * where i is the index of a friction constraint, and j is the index of the normal force
 * constraint to which the friction constraint is coupled. This coupling is done to model
 * an approximation to Coulomb's law of friction.
 */
public interface Solver {
	
	/**
	 * Given a list of constraints, solve the corresponding NCP 
	 * @param constraints List of constraints
	 * @return error
	 */
	public double solve(List<ConstraintEntry> constraints, List<Body> bodies );

	/**
	 * In each iteration of the solver, the lambda solution entries are changed. Any such a change corresponds to
	 * a change in velocity in the corresponding constraint. If all changes (involving all lambda entries) are below magnitude
	 * of epsilon, the current solution is defined acceptable and the solver is to terminate.
	 *  
	 * @param epsilon minimum change in solution velocity
	 */
	public void setErrorTolerance( double epsilon );
	
	/**
	 * Set an upper limit on the number of iterations, that this solver is allowed to perform. 
	 * @param n
	 */
	public void setMaximumIterations( int n );

}
