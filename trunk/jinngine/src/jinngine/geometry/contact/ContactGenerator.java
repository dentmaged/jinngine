package jinngine.geometry.contact;

import java.util.Iterator;

import jinngine.math.Vector3;

/**
 * A contact generator is used by the {@link ContactConstraint} to generate its contact information. 
 * As of present day, the only ContactGenerator available in jinngine is SupportMapContactGenerator,
 * which handles only convex-convex geometries given by support maps. (SupportMap3) 
 * 
 * ContactGenerator encapsulates all geometry and algorithm specific details. Therefore, it is the responsibility 
 * of the simulator (Model) to instantiate correct implementations of ContactGenerators, when various types of geometries 
 * in proximity are encountered during simulation. 
 * 
 * A ContactConstraint can handle one or more ContactGenerators. This allows for bodies in the simulation, which have more 
 * than one geometry instance defined.
 * 
 * @author Moo
 *
 */
public interface ContactGenerator {

	/**
	 * A simple structure class representing a contact point with a normal and a penetration depth
	 * @author Moo
	 */
	public class ContactPoint {
		public final Vector3 pa = new Vector3(), pb = new Vector3(), 
		midpoint = new Vector3(), normal = new Vector3();
		public double depth;
		public double distance;
		public boolean penetrating = false;
	}
	
	/**
	 * Run/update contact generation. This method will be invoked by the ContactConstraint,
	 * to update the contact information, to reflect the present configuration. An implementation
	 * should run all necessary computations during this call, and generate all contact points, as
	 * to be returned by getContacts().
	 * @param dt TODO
	 */
	public boolean run(double dt);
	
	/**
	 * Get all contact points generated by this contact generator
	 * @return An iterator of ContactPoints
	 */
	public Iterator<ContactPoint> getContacts();		
}
